Name:         splunk-otel-collector-otel-agent
Namespace:    default
Labels:       app=splunk-otel-collector
              app.kubernetes.io/instance=splunk-otel-collector
              app.kubernetes.io/managed-by=Helm
              app.kubernetes.io/name=splunk-otel-collector
              app.kubernetes.io/version=0.112.0
              chart=splunk-otel-collector-0.112.1
              helm.sh/chart=splunk-otel-collector-0.112.1
              heritage=Helm
              release=splunk-otel-collector
Annotations:  meta.helm.sh/release-name: splunk-otel-collector
              meta.helm.sh/release-namespace: default

Data
====
discovery.properties:
----
splunk.discovery:
  extensions:
    docker_observer:
      enabled: false
    host_observer:
      enabled: false
  receivers: {}


relay:
----
exporters:
  otlphttp:
    headers:
      X-SF-Token: ${SPLUNK_OBSERVABILITY_ACCESS_TOKEN}
    metrics_endpoint: https://ingest.us1.signalfx.com/v2/datapoint/otlp
    traces_endpoint: https://ingest.us1.signalfx.com/v2/trace/otlp
  otlphttp/entities:
    headers:
      X-SF-Token: ${SPLUNK_OBSERVABILITY_ACCESS_TOKEN}
    logs_endpoint: https://ingest.us1.signalfx.com/v3/event
  signalfx:
    access_token: ${SPLUNK_OBSERVABILITY_ACCESS_TOKEN}
    api_url: https://api.us1.signalfx.com
    correlation: null
    ingest_url: https://ingest.us1.signalfx.com
    sync_host_metadata: true
  splunk_hec/o11y:
    disable_compression: true
    endpoint: https://ingest.us1.signalfx.com/v1/log
    log_data_enabled: false
    profiling_data_enabled: true
    token: ${SPLUNK_OBSERVABILITY_ACCESS_TOKEN}
  splunk_hec/platform_logs:
    disable_compression: true
    endpoint: http://test-1-122360850.ap-south-1.elb.amazonaws.com:81/services/collector
    idle_conn_timeout: 10s
    index: main
    max_idle_conns: 200
    max_idle_conns_per_host: 200
    profiling_data_enabled: false
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_elapsed_time: 300s
      max_interval: 30s
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 1000
    source: kubernetes
    splunk_app_name: splunk-otel-collector
    splunk_app_version: 0.112.1
    timeout: 10s
    tls:
      insecure_skip_verify: false
    token: ${SPLUNK_PLATFORM_HEC_TOKEN}
  splunk_hec/platform_metrics:
    disable_compression: true
    endpoint: http://test-1-122360850.ap-south-1.elb.amazonaws.com:81/services/collector
    idle_conn_timeout: 10s
    index: k8s-metrics
    max_idle_conns: 200
    max_idle_conns_per_host: 200
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_elapsed_time: 300s
      max_interval: 30s
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 1000
    source: kubernetes
    splunk_app_name: splunk-otel-collector
    splunk_app_version: 0.112.1
    timeout: 10s
    tls:
      insecure_skip_verify: false
    token: ${SPLUNK_PLATFORM_HEC_TOKEN}
extensions:
  file_storage:
    directory: /var/addon/splunk/otel_pos
  health_check:
    endpoint: 0.0.0.0:13133
  k8s_observer:
    auth_type: serviceAccount
    node: ${K8S_NODE_NAME}
  zpages: null
processors:
  batch:
    metadata_keys:
    - X-SF-Token
  filter/logs:
    logs:
      exclude:
        match_type: strict
        resource_attributes:
        - key: splunk.com/exclude
          value: "true"
  k8sattributes:
    extract:
      annotations:
      - from: pod
        key: splunk.com/sourcetype
      - from: namespace
        key: splunk.com/exclude
        tag_name: splunk.com/exclude
      - from: pod
        key: splunk.com/exclude
        tag_name: splunk.com/exclude
      - from: namespace
        key: splunk.com/index
        tag_name: com.splunk.index
      - from: pod
        key: splunk.com/index
        tag_name: com.splunk.index
      labels:
      - key: app
      metadata:
      - k8s.namespace.name
      - k8s.node.name
      - k8s.pod.name
      - k8s.pod.uid
      - container.id
      - container.image.name
      - container.image.tag
    filter:
      node_from_env_var: K8S_NODE_NAME
    pod_association:
    - sources:
      - from: resource_attribute
        name: k8s.pod.uid
    - sources:
      - from: resource_attribute
        name: k8s.pod.ip
    - sources:
      - from: resource_attribute
        name: ip
    - sources:
      - from: connection
    - sources:
      - from: resource_attribute
        name: host.name
  k8sattributes/metrics:
    extract:
      annotations:
      - from: pod
        key: splunk.com/sourcetype
      - from: namespace
        key: splunk.com/metricsIndex
        tag_name: com.splunk.index
      - from: pod
        key: splunk.com/metricsIndex
        tag_name: com.splunk.index
      metadata: []
    filter:
      node_from_env_var: K8S_NODE_NAME
    pod_association:
    - sources:
      - from: resource_attribute
        name: k8s.node.name
    - sources:
      - from: resource_attribute
        name: k8s.pod.uid
    - sources:
      - from: resource_attribute
        name: k8s.pod.ip
    - sources:
      - from: resource_attribute
        name: ip
    - sources:
      - from: connection
  memory_limiter:
    check_interval: 2s
    limit_mib: ${SPLUNK_MEMORY_LIMIT_MIB}
  resource:
    attributes:
    - action: insert
      key: k8s.node.name
      value: ${K8S_NODE_NAME}
    - action: upsert
      key: k8s.cluster.name
      value: ram-aks-1
  resource/add_agent_k8s:
    attributes:
    - action: insert
      key: k8s.pod.name
      value: ${K8S_POD_NAME}
    - action: insert
      key: k8s.pod.uid
      value: ${K8S_POD_UID}
    - action: insert
      key: k8s.namespace.name
      value: ${K8S_NAMESPACE}
  resource/add_environment:
    attributes:
    - action: insert
      key: deployment.environment
      value: ram-test
  resource/logs:
    attributes:
    - action: upsert
      from_attribute: k8s.pod.annotations.splunk.com/sourcetype
      key: com.splunk.sourcetype
    - action: delete
      key: k8s.pod.annotations.splunk.com/sourcetype
    - action: delete
      key: splunk.com/exclude
  resourcedetection:
    detectors:
    - env
    - aks
    - azure
    - system
    override: true
    timeout: 15s
receivers:
  filelog:
    encoding: utf-8
    exclude:
    - /var/log/pods/default_splunk-otel-collector*_*/otel-collector/*.log
    fingerprint_size: 1kb
    force_flush_period: "0"
    include:
    - /var/log/pods/*/*/*.log
    include_file_name: false
    include_file_path: true
    max_concurrent_files: 1024
    max_log_size: 1MiB
    operators:
    - id: get-format
      routes:
      - expr: body matches "^\\{"
        output: parser-docker
      - expr: body matches "^[^ Z]+ "
        output: parser-crio
      - expr: body matches "^[^ ]+ "
        output: parser-containerd
      type: router
    - id: parser-crio
      regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
      timestamp:
        layout: 2006-01-02T15:04:05.999999999Z07:00
        layout_type: gotime
        parse_from: attributes.time
      type: regex_parser
    - combine_field: attributes.log
      combine_with: ""
      id: crio-recombine
      is_last_entry: attributes.logtag == 'F'
      max_log_size: 1048576
      output: handle_empty_log
      source_identifier: attributes["log.file.path"]
      type: recombine
    - id: parser-containerd
      regex: ^(?P<time>[^ ]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
      timestamp:
        layout: 2006-01-02T15:04:05.999999999Z07:00
        layout_type: gotime
        parse_from: attributes.time
      type: regex_parser
    - combine_field: attributes.log
      combine_with: ""
      id: containerd-recombine
      is_last_entry: attributes.logtag == 'F'
      max_log_size: 1048576
      output: handle_empty_log
      source_identifier: attributes["log.file.path"]
      type: recombine
    - id: parser-docker
      timestamp:
        layout: '%Y-%m-%dT%H:%M:%S.%LZ'
        parse_from: attributes.time
      type: json_parser
    - combine_field: attributes.log
      combine_with: ""
      id: docker-recombine
      is_last_entry: attributes.log endsWith "\n"
      max_log_size: 1048576
      output: handle_empty_log
      source_identifier: attributes["log.file.path"]
      type: recombine
    - field: attributes.log
      id: handle_empty_log
      if: attributes.log == nil
      type: add
      value: ""
    - parse_from: attributes["log.file.path"]
      regex: ^\/var\/log\/pods\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[^\/]+)\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
      type: regex_parser
    - from: attributes.uid
      to: resource["k8s.pod.uid"]
      type: move
    - from: attributes.restart_count
      to: resource["k8s.container.restart_count"]
      type: move
    - from: attributes.container_name
      to: resource["k8s.container.name"]
      type: move
    - from: attributes.namespace
      to: resource["k8s.namespace.name"]
      type: move
    - from: attributes.pod_name
      to: resource["k8s.pod.name"]
      type: move
    - field: resource["com.splunk.sourcetype"]
      type: add
      value: EXPR("kube:container:"+resource["k8s.container.name"])
    - from: attributes.stream
      to: attributes["log.iostream"]
      type: move
    - from: attributes["log.file.path"]
      to: resource["com.splunk.source"]
      type: move
    - from: attributes.log
      id: clean-up-log-record
      to: body
      type: move
    - field: attributes.time
      type: remove
    poll_interval: 200ms
    retry_on_failure:
      enabled: true
    start_at: beginning
    storage: file_storage
  fluentforward:
    endpoint: 0.0.0.0:8006
  hostmetrics:
    collection_interval: 10s
    scrapers:
      cpu: null
      disk: null
      filesystem: null
      load: null
      memory: null
      network: null
      paging: null
      processes: null
  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14250
      thrift_http:
        endpoint: 0.0.0.0:14268
  kubeletstats:
    auth_type: serviceAccount
    collection_interval: 10s
    endpoint: ${K8S_NODE_IP}:10250
    extra_metadata_labels:
    - container.id
    insecure_skip_verify: true
    metric_groups:
    - container
    - pod
    - node
  nop: null
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  prometheus/agent:
    config:
      scrape_configs:
      - job_name: otel-agent
        metric_relabel_configs:
        - action: drop
          regex: otelcol_rpc_.*
          source_labels:
          - __name__
        - action: drop
          regex: otelcol_http_.*
          source_labels:
          - __name__
        - action: drop
          regex: otelcol_processor_batch_.*
          source_labels:
          - __name__
        scrape_interval: 10s
        static_configs:
        - targets:
          - ${K8S_POD_IP}:8889
  receiver_creator:
    receivers: null
    watch_observers:
    - k8s_observer
  signalfx:
    endpoint: 0.0.0.0:9943
  smartagent/signalfx-forwarder:
    listenAddress: 0.0.0.0:9080
    type: signalfx-forwarder
  zipkin:
    endpoint: 0.0.0.0:9411
service:
  extensions:
  - file_storage
  - health_check
  - k8s_observer
  - zpages
  pipelines:
    logs:
      exporters:
      - splunk_hec/o11y
      - splunk_hec/platform_logs
      processors:
      - memory_limiter
      - k8sattributes
      - filter/logs
      - batch
      - resourcedetection
      - resource
      - resource/logs
      - resource/add_environment
      receivers:
      - filelog
      - fluentforward
      - otlp
    logs/entities:
      exporters:
      - otlphttp/entities
      processors:
      - memory_limiter
      - batch
      - resourcedetection
      - resource
      receivers:
      - nop
    metrics:
      exporters:
      - signalfx
      - splunk_hec/platform_metrics
      processors:
      - memory_limiter
      - batch
      - resourcedetection
      - resource
      - resource/add_environment
      - k8sattributes/metrics
      receivers:
      - hostmetrics
      - kubeletstats
      - otlp
      - receiver_creator
      - signalfx
    metrics/agent:
      exporters:
      - signalfx
      - splunk_hec/platform_metrics
      processors:
      - memory_limiter
      - batch
      - resource/add_agent_k8s
      - resourcedetection
      - resource
      - k8sattributes/metrics
      receivers:
      - prometheus/agent
    traces:
      exporters:
      - otlphttp
      - signalfx
      processors:
      - memory_limiter
      - k8sattributes
      - batch
      - resourcedetection
      - resource
      - resource/add_environment
      receivers:
      - otlp
      - jaeger
      - smartagent/signalfx-forwarder
      - zipkin
  telemetry:
    metrics:
      address: 0.0.0.0:8889



BinaryData
====

Events:  <none>
